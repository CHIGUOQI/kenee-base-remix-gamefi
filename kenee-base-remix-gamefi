// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract KeeneNetwork {
    string public name = "KeeneNetwork";
    string public symbol = "KNW";

    uint256 public _totalSupply;
    mapping(uint256 => Token) private _tokens;
    mapping(address => uint256[]) private _ownerTokens;
    mapping(uint256 => address) private _tokenOwners;
    mapping(uint256 => string) private _tokenURIs;

    struct Token {
        uint256 id;
        address owner;
        string uri;
    }

    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Mint(address indexed to, uint256 indexed tokenId, string uri);

    constructor() {
        _totalSupply = 0;
    }

    function mintNFT(address to, string memory uri) public {
        require(to != address(0), "ERC721: mint to the zero address");

        uint256 newTokenId = ++_totalSupply;
        Token storage token = _tokens[newTokenId];
        token.id = newTokenId;
        token.owner = to;
        token.uri = uri;

        _tokenOwners[newTokenId] = to;
        _tokenURIs[newTokenId] = uri;

        _ownerTokens[to].push(newTokenId);

        emit Mint(to, newTokenId, uri);
    }

    function tokenURI(uint256 tokenId) public view returns (string memory) {
        require(_exists(tokenId), "ERC721: URI query for nonexistent token");
        return _tokenURIs[tokenId];
    }

    function balanceOf(address owner) public view returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _ownerTokens[owner].length;
    }

    function ownerOf(uint256 tokenId) public view returns (address) {
        address owner = _tokenOwners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    function transferFrom(address from, address to, uint256 tokenId) public {
        require(_tokenOwners[tokenId] == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _transfer(from, to, tokenId);
    }

    function _transfer(address from, address to, uint256 tokenId) internal {
        _tokenOwners[tokenId] = to;
        _removeToken(_ownerTokens[from], tokenId);
        _ownerTokens[to].push(tokenId);

        emit Transfer(from, to, tokenId);
    }

    function _removeToken(uint256[] storage tokenList, uint256 tokenId) internal {
        for (uint256 i = 0; i < tokenList.length - 1; i++) {
            if (tokenList[i] == tokenId) {
                tokenList[i] = tokenList[tokenList.length - 1];
                tokenList.pop();
                break;
            }
        }
    }

    function _exists(uint256 tokenId) internal view returns (bool) {
        return _tokenOwners[tokenId] != address(0);
    }
}
